#include <iostream>
using namespace std;

struct Queue {
	int front, rear, size;
	int capacity;
	int* array;
};

struct Queue* createQueue(int capacity) {
	struct Queue* queue = new Queue();
	queue->capacity = capacity;
	queue->front = queue->size = 0;
	queue->rear = capacity - 1;
	queue->array = new int[capacity];
	return queue;
}

int isFull(struct Queue* queue) {
	return (queue->size == queue->capacity);
}

int isEmpty(struct Queue* queue) {
	return (queue->size == 0);
}

void enqueue(struct Queue* queue, int item) {
	if (isFull(queue))
		return;
	queue->rear = (queue->rear + 1) % queue->capacity;
	queue->array[queue->rear] = item;
	queue->size = queue->size + 1;
}

int dequeue(struct Queue* queue) {
	if (isEmpty(queue))
		return -1;
	int item = queue->array[queue->front];
	queue->front = (queue->front + 1) % queue->capacity;
	queue->size = queue->size - 1;
	return item;
}

int front(struct Queue* queue) {
	if (isEmpty(queue))
		return -1;
	return queue->array[queue->front];
}

int rear(struct Queue* queue) {
	if (isEmpty(queue))
		return -1;
	return queue->array[queue->rear];
}

int main() {
	int T;
	cin >> T;
	while (T--) {
		int N, M;
		cin >> N >> M;
		struct Queue* main = createQueue(N);
		for (int i = 0; i < N; i++) {
			enqueue(main, i);
		}

		Queue **queues = new Queue *[M];
		for (int i = 0; i < M; i++){
			queues[i] = createQueue(N);
		}
	}
	return 0;
}

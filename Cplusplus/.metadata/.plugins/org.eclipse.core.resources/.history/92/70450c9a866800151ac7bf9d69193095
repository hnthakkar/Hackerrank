#include <iostream>
using namespace std;

struct node{
	int value;
	struct node *left;
	struct node *right;
};

static int preIndex = 0;
struct node * buildTree(int pre[], int in[], int inStrt, int inEnd){
	struct node * ret;
	if(inStrt > inEnd)
		return NULL;

	ret = new node();
	ret->value = pre[preIndex++];
	ret->left = NULL;
	ret->right = NULL;

	if(inStrt == inEnd)
		return ret;
	int i = inStrt;
	for (; i <= inEnd; i++){
		if(in[i] == pre[preIndex-1]){
			break;
		}
	}

	struct node * lref = buildTree(pre, in, inStrt, i-1);
	if(lref){
		if(lref->value == -1){
			return lref;
		} else if (lref->value > ret->value){
			ret->value = -1;
			return ret;
		}
		ret->left = lref;
	}

	struct node * rref = buildTree(pre, in, i+1, inEnd);
	if(rref){
		if(rref->value == -1){
			return rref;
		} else if (rref->value < ret->value){
			ret->value = -1;
			return ret;
		}
		ret->right = rref;
	}
	return ret;
}

void printInorder(struct node* node) {
	if (node == NULL)
		return;

	printInorder(node->left);
	cout << node->value << " ";
	printInorder(node->right);
}

void printPreorder(struct node* node) {
	if (node == NULL)
		return;

	cout << node->value << " ";
	printPreorder(node->left);
	printPreorder(node->right);
}

void printPostorder(struct node* node) {
	if (node == NULL)
		return;

	printPostorder(node->left);
	printPostorder(node->right);
	cout << node->value << endl;
}

int main(){
	int T;
	cin >> T;
	for(int t = 1; t <= T; t++){
		int N;
		cin >> N;
		int in[N];
		for (int i = 0; i < N; i++) {
			in[i] = i+1;
		}
		int pre[N];
		for (int i = 0; i < N; i++) {
			cin >> pre[i];
		}
		preIndex = 0;
		struct node * root = buildTree(pre, in, 0, N-1);
		if(root->value == -1){
			cout << "Case " << t << ":" << endl;
			cout << -1 << endl;
		} else {
			//cout << "Case " << t << ":" << endl;
			printInorder(root);
			printPreorder(root);
			printPostorder(root);

		}
	}
	return 0;
}
